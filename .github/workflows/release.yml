name: Release

on: [push]

permissions:
  contents: write

env:
  GO_VERSION: '>=1.24.0'

jobs:

  build:

    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
        - ubuntu-latest
        - ubuntu-24.04-arm
        - macos-latest
        - windows-latest
        arch:
        - amd64
        - arm64
        exclude:
        - os: windows-latest
          arch: arm64
        - os: ubuntu-latest
          arch: arm64
        - os: ubuntu-24.04-arm
          arch: amd64

    steps:

    - uses: actions/checkout@v5
    - uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup env
      id: setup
      shell: bash
      run: |
        export NAME="${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}"
        if [[ ${GITHUB_REF} =~ ^refs/tags/v[0-9]+\.[0-9]+ ]] ; then
          export VERSION=${GITHUB_REF_NAME}
        else
          export VERSION=SNAPSHOT
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        case ${{ matrix.os }} in
          ubuntu-*)
            export GOOS=linux
            export PKGEXT=.tar.gz
            ;;
          macos-*)
            export GOOS=darwin
            export PKGEXT=.zip
            ;;
          windows-*)
            choco install zip
            export GOOS=windows
            export PKGEXT=.zip
            ;;
        esac
        export GOARCH=${{ matrix.arch }}
        echo "GOOS=${GOOS}" >> $GITHUB_ENV
        echo "GOARCH=${GOARCH}" >> $GITHUB_ENV
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "NAME=${NAME}" >> $GITHUB_ENV
        echo "PKGNAME=${NAME}_${VERSION}_${GOOS}_${GOARCH}" >> $GITHUB_ENV
        echo "PKGEXT=${PKGEXT}" >> $GITHUB_ENV

    - name: Build
      shell: bash
      run: |
        go build

    - name: Archive
      shell: bash
      run: |
        rm -rf _build/${PKGNAME}
        mkdir -p _build/${PKGNAME}
        cp -p ${NAME} _build/${PKGNAME}
        cp -p LICENSE _build/${PKGNAME}
        cp -p README.md _build/${PKGNAME}

        case "${PKGEXT}" in
          ".tar.gz")
            tar caf _build/${PKGNAME}${PKGEXT} -C _build ${PKGNAME}
            ;;
          ".zip")
            (cd _build && zip -r9q ${PKGNAME}${PKGEXT} ${PKGNAME})
            ;;
        esac
        ls -laFR _build

    - name: Artifact upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.GOOS }}_${{ env.GOARCH }}
        path: _build/${{ env.PKGNAME }}${{ env.PKGEXT }}

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
    - build
    steps:
    - uses: actions/download-artifact@v5
      with: { name: darwin_amd64 }
    - uses: actions/download-artifact@v5
      with: { name: darwin_arm64 }
    - uses: actions/download-artifact@v5
      with: { name: linux_amd64 }
    - uses: actions/download-artifact@v5
      with: { name: linux_arm64 }
    - uses: actions/download-artifact@v5
      with: { name: windows_amd64 }
    - run: ls -lafR
    - name: Release
      uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
      with:
        draft: true
        prerelease: ${{ contains(github.ref_name, '-alpha.') || contains(github.ref_name, '-beta.') }}
        files: |
          *.tar.gz
          *.zip
        fail_on_unmatched_files: true
        generate_release_notes: true
        append_body: true

# based on: github.com/koron-go/_skeleton/.github/workflows/release.yml
# $Hash:56eff628d6b72f94c7a285454a449fbb0770031e5c3ac82101a2cf65$
